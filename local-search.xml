<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>XDOJ-278约瑟夫环</title>
    <link href="/2022/10/21/XDOJ-278%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/"/>
    <url>/2022/10/21/XDOJ-278%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="约瑟夫环"><a href="#约瑟夫环" class="headerlink" title="约瑟夫环"></a>约瑟夫环</h1><p>时间限制<br>2 S<br>内存限制<br>10000 Kb </p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>习题集P79。编号为1,2,…,n的n个人按顺时针方向围坐一圈，每人持有一个密码（正整数）。现在给定一个随机数m&gt;0，从编号为1的人开始，按顺时针方向1开始顺序报数，报到m时停止。报m的人出圈，同时留下他的密码作为新的m值，从他在顺时针方向上的下一个人开始，重新从1开始报数，如此下去，直至所有的人全部出圈为止。<br>问题输入<br>输入数据第一行为两个正整数n和m，分别表示人的个数及初始随机数，每组数据的第二行为n个整数，表示每个人持有的密码。<br>问题输出<br>用一行输出n个整数表示依次出圈人的编号，整数之间用空格分隔<br>输入样例<br>7 20<br>3 1 7 2 4 8 4</p><p>输出样例<br>6 1 4 7 2 3 5<br>提示<br>使用不带头节点的循环链表 </p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>创建一个单向循环链表Node，根据题目中的数据结构，在节点中创建密码data、序号num、下一节点的地址的变量next；</li><li>对链表进行赋值。使用CreateList()和InitNode()函数，根据输入的数据进行存储密码。并且对每个节点进行标序号（从1开始，1，2，3，4……）；</li><li>根据题意，创建DeleteNode()和Remove()函数。其中DeleteNode(Node *p)函数用来传入需要删除的节点的地址，遍历整个链表，达到删除该节点的目的。而Remove()则是根据题意，根据m之确定循环次数，循环链表结束后删除对应的节点。删除的同时打印该节点的序号。</li></ol><p>测试数据：</p><p>第一组：</p><p>输入：</p><p><em>7 20</em></p><p><em>3 1 7 2 4 8 4</em></p><p>输出：</p><p><em>6 1 4 7 2 3 5</em></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> *next;<br>&#125; Node;<br><span class="hljs-function">Node *<span class="hljs-title">InitNode</span><span class="hljs-params">(Node *p)</span></span><br><span class="hljs-function"></span>&#123;<br>    p = (Node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node));<br>    p-&gt;data = <span class="hljs-number">-1</span>;<br>    p-&gt;num = <span class="hljs-number">-1</span>;<br>    p-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-function">Node *<span class="hljs-title">CreateList</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    Node *p;<br>    p = <span class="hljs-built_in">InitNode</span>(p);<br>    Node *q = p;<br>    Node *head = p;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (p-&gt;next != <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            p = p-&gt;next;<br>        &#125;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;p-&gt;data);<br>        p-&gt;num = i + <span class="hljs-number">1</span>;<br>        q = <span class="hljs-built_in">InitNode</span>(q);<br>        p-&gt;next = q;<br>    &#125;<br>    p-&gt;next = head;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DeleteNode</span><span class="hljs-params">(Node *p)</span></span><br><span class="hljs-function"></span>&#123;<br>    Node *q = p;<br>    <span class="hljs-keyword">while</span> (q-&gt;next != p)<br>    &#123;<br>        q = q-&gt;next;<br>    &#125;<br>    q-&gt;next = q-&gt;next-&gt;next;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Remove</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    Node *p = head;<br>    Node *q;<br>    <span class="hljs-type">int</span> i, index = m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>    &#123;<br><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; index - <span class="hljs-number">1</span>; i++)<br>        &#123;<br>            p = p-&gt;next;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p-&gt;num);<br>        index = p-&gt;data;<br>        q = p;<br>        p = p-&gt;next;<br>        <span class="hljs-built_in">DeleteNode</span>(q);<br>        <span class="hljs-built_in">free</span>(q);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m, n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    Node *head = <span class="hljs-built_in">CreateList</span>(n);<br>    <span class="hljs-comment">// for (int i = 0; i &lt; n; i++)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     printf(&quot;%d %d %d\n&quot;, head-&gt;data, head-&gt;next, head-&gt;num);</span><br>    <span class="hljs-comment">//     head = head-&gt;next;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-built_in">Remove</span>(head, n, m);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>XDOJ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVAT的安装</title>
    <link href="/2022/08/14/CVAT%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <url>/2022/08/14/CVAT%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="CVAT在windows下的安装"><a href="#CVAT在windows下的安装" class="headerlink" title="CVAT在windows下的安装"></a>CVAT在windows下的安装</h1><p>CVAT(computer vision annotation tool)是一个在docker下运行的图像标注软件，它的优势在于免费开源以及可远程操作。</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>安装 WSL2（Linux 的 Windows 子系统）参考<a href="https://docs.microsoft.com/windows/wsl/install-win10">这个官方指南</a>。WSL2 需要 Windows 10 版本 2004 或更高版本。注意：除非需要，否则您可能不必安装 Linux 发行版。</p><h3 id="安装WSL2"><a href="#安装WSL2" class="headerlink" title="安装WSL2"></a>安装WSL2</h3><p>在<strong>管理员 PowerShell</strong> 或 Windows 命令提示符中输入此命令，然后重启计算机来安装运行适用于 Linux 的 Windows 子系统 (WSL) 所需的全部内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wsl --install<br></code></pre></td></tr></table></figure><blockquote><p>上述命令仅在完全未安装 WSL 时才有效，如果运行 <code>wsl --install</code> 并查看 WSL 帮助文本，请尝试运行 <code>wsl --list --online</code> 以查看可用发行版列表并运行 <code>wsl --install -d &lt;DistroName&gt;</code> 以安装发行版。 若要卸载 WSL，请参阅<a href="https://docs.microsoft.com/zh-CN/windows/wsl/troubleshooting#uninstall-legacy-version-of-wsl">卸载旧版 WSL</a> 或<a href="https://docs.microsoft.com/zh-CN/windows/wsl/basic-commands#unregister-or-uninstall-a-linux-distribution">注销或卸载 Linux 发行版</a>。</p></blockquote><h3 id="下载并安装Docker"><a href="#下载并安装Docker" class="headerlink" title="下载并安装Docker"></a>下载并安装Docker</h3><p>双击<code>Docker for Windows Installer</code>运行安装程序。更多说明可以在<a href="https://docs.docker.com/docker-for-windows/install/">这里</a>找到。</p><p>安装完毕后记得打开Docker</p><h3 id="下载并安装Git"><a href="#下载并安装Git" class="headerlink" title="下载并安装Git"></a>下载并安装Git</h3><p>下载并安装<a href="https://www.google.com/chrome/">谷歌浏览器</a>。</p><p>Chrome是<strong>唯一受 CVAT 支持的</strong>浏览器。</p><h3 id="部署CVAT"><a href="#部署CVAT" class="headerlink" title="部署CVAT"></a>部署CVAT</h3><p>从 <a href="https://github.com/opencv/cvat">GitHub 存储</a><em>库克隆 CVAT</em>源代码</p><p>在任意文件夹下打开 Git Bush，执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/opencv/cvat<br><span class="hljs-built_in">cd</span> cvat<br></code></pre></td></tr></table></figure><p>运行 docker 容器。从 DockerHub 下载最新的 CVAT 版本和其他所需的镜像（如 postgres、redis 等）并创建容器<strong>需要亿些时间</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d<br></code></pre></td></tr></table></figure><p>创建一个超级用户。超级用户可以使用管理面板将正确的组分配给其他用户。请使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">winpty docker <span class="hljs-built_in">exec</span> -it cvat bash -ic <span class="hljs-string">&#x27;python3 ~/manage.py createsuperuser&#x27;</span><br></code></pre></td></tr></table></figure><p>按照提示输入邮箱、用户名和密码即可。</p><p>打开已安装的 Google Chrome 浏览器并转到<a href="http://localhost:8080/">localhost:8080</a>。</p><p>在登录页面上输入超级用户的登录名&#x2F;密码，然后点按Login按钮。</p>]]></content>
    
    
    <categories>
      
      <category>原创</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安装</tag>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务器的使用</title>
    <link href="/2022/08/12/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/08/12/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="开端，，，"><a href="#开端，，，" class="headerlink" title="开端，，，"></a>开端，，，</h2><p>昨天晚上成功安装了YOLO后，根据网上的内容修改参数、安装依赖，正准备运行程序时发现了一个问题：</p><p><strong>我的电脑算力不够</strong></p><p>素材总共299个，每个素材7个标签要跑7次。而我的电脑每跑一次就要用不止一分钟，也就是说，我可能需要电脑满负载两天两夜才有可能跑完。。。</p><p>所以我打算曲线救国，用云服务器来跑。</p><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><p>OSS：用于上传、下载自己的文件，虽然只能传压缩包，但速度比较快。</p><p>XShell：用于远程控制服务器。由于服务器一般都是Linux的，因此我们只需要在终端进行操作即可。（这个时候就体现出Linux的指令的使用的重要性了）</p><p>Xftp：协助XShell工作，用于本地主机和服务器之间小型文件的传输。</p><h2 id="部署服务器"><a href="#部署服务器" class="headerlink" title="部署服务器"></a>部署服务器</h2><p>在某网站逛了一圈，租用GPU的价格普遍在1~4rmb&#x2F;h间浮动，性能越好价格也就越贵。我建议选用3060以上的显卡，因为节省时间真的很重要2333（踩过坑的过来人如是说</p><p>我部署了TITAN X的机器，启动之前可以选择需要搭建的环境。尽管需要的大部分依赖都已经被安装好了，但仍然需要按照requirements.txt中的要求再安装一遍。</p><p>我用到的是Python、pytorch等工具</p><p>调整好源代码中的参数，一切准备就绪~</p><h2 id="开炮！"><a href="#开炮！" class="headerlink" title="开炮！"></a>开炮！</h2><p>鸡冻的时刻到了，在终端输入python train.py</p><p>在服务器上程序运行成功！</p><p><img src="/2022/08/12/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/success.jpg" alt="success"></p><p>经过了1h49m的运行，，，终于结束了</p><p>得到的权重保存到了runs中。</p><h2 id="把需要的文件传输回来"><a href="#把需要的文件传输回来" class="headerlink" title="把需要的文件传输回来"></a>把需要的文件传输回来</h2><p>使用zip进行压缩runs文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zip -r runs.zip /hy-tmp/yolov5/runs<br></code></pre></td></tr></table></figure><p>再把打包好的压缩包上传至个人空间。</p><p>完美！</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YOLO</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YOLO学习笔记</title>
    <link href="/2022/08/10/YOLO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/08/10/YOLO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="YOLO学习笔记"><a href="#YOLO学习笔记" class="headerlink" title="YOLO学习笔记"></a>YOLO学习笔记</h1><p>本文章主要用来写YOLOv5的实操过程（因为理论知识不太会2333），主要用于记录学习的过程</p><p>众所周知，YOLO是一个用来实时识别图像的一个工具，因为其速度快、效率高高可以用在很多领域。</p><h2 id="YOLO-v5-0的曲折安装过程"><a href="#YOLO-v5-0的曲折安装过程" class="headerlink" title="YOLO v5.0的曲折安装过程"></a>YOLO v5.0的曲折安装过程</h2><p>YOLO v5.0的github<a href="https://github.com/ultralytics/yolov5/tree/v5.0">官网</a>，复制需要clone地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/ultralytics/yolov5.git<br></code></pre></td></tr></table></figure><p>这时我们就会得到yolov5的文件夹</p><p>用pycharm打开它，在<strong>终端</strong>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -r requirement.txt<br></code></pre></td></tr></table></figure><p>这个会有亿点点慢，耐心等待即可。</p><p>当最后出现<strong>Success</strong>的字样时，也就安装完毕了~</p><p>安装完毕运行一次dectect.py试试，若出现错误可以根据提示进行操作。运行完毕后可以在run里面找到自己的运行结果。</p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="安装依赖包时出现警告"><a href="#安装依赖包时出现警告" class="headerlink" title="安装依赖包时出现警告"></a>安装依赖包时出现警告</h4><blockquote><p>WARNING: Ignore distutils configs in setup.cfg due to encoding errors.</p></blockquote><p>编码问题，在终端输入<strong>chcp 65001</strong>即可</p><h4 id="找不到需要的module"><a href="#找不到需要的module" class="headerlink" title="找不到需要的module"></a>找不到需要的module</h4><p>明明已经成功安装了requirements.txt中的模块，为什么还是在Pycharm中提示No such module捏？</p><p>这是因为我的电脑中有两个Python，一个是我在上学期学Python的时候自己单独下载的Python，另外一个是Anaconda中的Python。而我下载的Module在Anaconda中。</p><p>解决方法：</p><p>在Pycharm中把<strong>解释器</strong>的路径改为Anaconda的Python路径，大概是在users&#x2F;anaconda3&#x2F;lib中。</p><hr><p>OK，到这里安装过程就结束了</p><p>下面可以准备进行数据标注（对图片打标签）的学习了</p><h2 id="数据标注"><a href="#数据标注" class="headerlink" title="数据标注"></a>数据标注</h2><p>利用LabelImg进行数据标注（前两天学过），记得把模式调成YOLO，这样就会生成YOLO可以识别的txt格式的标签了。</p><h2 id="修改配置文件-改参数"><a href="#修改配置文件-改参数" class="headerlink" title="修改配置文件(改参数)"></a>修改配置文件(改参数)</h2><p>去data中找到coco128.yml，把里面的东西复制出来，粘贴到新的文件中，<strong>例如 wzry.yaml</strong></p><p>wzry_parameter.yaml需要修改的内容：</p><p>nc是标签名个数</p><p>names标签的名字</p><p>这次就可以了</p><p>再去models中找到一份模板，例如yolov5x.yaml，改名为wzry_model.yaml</p><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>由于本人电脑算力不够，便放在了付费GPU服务器中计算。</p><p>去train.py中修改里面的Argparse参数即可（主要是一些关于路径的问题）</p><p><img src="/2022/08/10/YOLO%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/pic1.png" alt="改参数啦！！改参数~~~"></p><p>训练完毕后，进入到runs里面的exp文件夹（exp1、exp2等等是按照训练先后不同加以区分），其中last.pt和best.pt就是得到的权重文件。得到了权重，我们就可以开始识别了。</p><h2 id="识别"><a href="#识别" class="headerlink" title="识别"></a>识别</h2><p>detect.py就是用来识别的文件，和train.py同理，我们可以修改main函数里面argparse中的路径用来对图片或者视频进行识别。导出的文件依然在runs里面。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YOLO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>elan的安装和使用</title>
    <link href="/2022/08/09/elan%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/08/09/elan%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="ELAN的安装和使用"><a href="#ELAN的安装和使用" class="headerlink" title="ELAN的安装和使用"></a>ELAN的安装和使用</h1><p>在Bilibili上看了ELAN的软件新手入门教程视频，在这里把视频内容整理为文档便于查阅</p><h2 id="ELAN和VLC-media-player的安装"><a href="#ELAN和VLC-media-player的安装" class="headerlink" title="ELAN和VLC  media player的安装"></a>ELAN和VLC  media player的安装</h2><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>ELAN官方网站下载</p><p><a href="https://archive.mpi.nl/tla/elan/download">ELAN下载</a></p><p>VLC media player官方网站下载</p><p><a href="https://www.videolan.org/vlc/">VLC media player下载</a></p><p>注意：ELAN官网需要挂梯子，不然不能访问</p><p>按照提示步骤安装即可</p><h2 id="使用VLC-media-player处理视频"><a href="#使用VLC-media-player处理视频" class="headerlink" title="使用VLC media player处理视频"></a>使用VLC media player处理视频</h2><p>视频导入到ELAN中时，只会显示视频的轨道，不会显示音频的轨道，很多时候我们也需要对视频的音频轨道进行标记，而VLC media player可以导出音频的轨道。换句话说，VLC media player是ELAN 的辅助工具。</p><h3 id="视频转音频"><a href="#视频转音频" class="headerlink" title="视频转音频"></a>视频转音频</h3><p>在VLC media player中点击媒体、转换，选中视频后将音频文件类型存为wav就可以了。</p><p>建议音频的名称和视频名称相同。</p><h2 id="使用ELAN处理视频"><a href="#使用ELAN处理视频" class="headerlink" title="使用ELAN处理视频"></a>使用ELAN处理视频</h2><h3 id="导入和保存"><a href="#导入和保存" class="headerlink" title="导入和保存"></a>导入和保存</h3><p>依次点击文件、新建，选择需要用到的视频，添加到已选文件中，然后再把音频文件也添加进去。</p><p>点击保存，选择保存的路径即可。（建议保存文件的名称和源文件相同）</p><h3 id="层的添加"><a href="#层的添加" class="headerlink" title="层的添加"></a>层的添加</h3><p>点击 层 可以进行层的添加和删除。通过鼠标可以选中视频下方的进度条，右键对选中的片段添加层以及注释。</p><h3 id="层的统计"><a href="#层的统计" class="headerlink" title="层的统计"></a>层的统计</h3><p>点击 查看 可以对已经标记的<strong>单个文件</strong>进行层的统计和注释进行查看。</p><p>对于<strong>多个文件</strong>点击 文件、多文件处理 选择需要查看的文件，可以查看对多个文件的统计。</p>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
      <category>原创</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安装</tag>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>labelImg的安装和使用</title>
    <link href="/2022/08/08/labelImg%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/08/08/labelImg%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="labelImg的安装和使用"><a href="#labelImg的安装和使用" class="headerlink" title="labelImg的安装和使用"></a>labelImg的安装和使用</h1><h2 id="labelImg简介"><a href="#labelImg简介" class="headerlink" title="labelImg简介"></a>labelImg简介</h2><p>LabelImg 是一个图形图像标注工具。</p><p>它是用 Python 编写的，并使用 Qt 作为其图形界面。</p><p>注释以 PASCAL VOC 格式保存为 XML 文件，这是<a href="http://www.image-net.org/">ImageNet</a>使用的格式。此外，它还支持 YOLO 和 CreateML 格式。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="在Windows中安装labelImg"><a href="#在Windows中安装labelImg" class="headerlink" title="在Windows中安装labelImg"></a>在Windows中安装labelImg</h3><p>下载并安装Anaconda（这是要用来使用conda的安装功能）</p><p>打开C盘打开GitBush（其他位置也可以），输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/tzutalin/labelImg<br></code></pre></td></tr></table></figure><p>打开Anaconda Prompt，进入labelImg目录</p><p><strong>依次输入</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install pyqt=5<br>conda install -c anaconda lxml<br>pyrcc5 -o libs/resources.py resources.qrc<br></code></pre></td></tr></table></figure><p>按照提示依次输入，遇到（y&#x2F;n）时输入Y，这样就安装好了</p><p>若安装失败，提示conda install packages failed，可以参考<a href="https://stackoverflow.com/questions/61134985/conda-install-packages-error-collecting-package-metadata-current-repodata-json"><a href="https://stackoverflow.com/questions/61134985/conda-install-packages-error-collecting-package-metadata-current-repodata-json">conda install packages error: Collecting package metadata (current_repodata.json): failed</a></a> （一般来说如果挂着梯子把梯子关闭就好了）</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="PascalVOC"><a href="#PascalVOC" class="headerlink" title="PascalVOC"></a>PascalVOC</h3><ol><li>使用上述说明构建和启动。</li><li>单击菜单&#x2F;文件中的“更改默认保存的注释文件夹”</li><li>点击“打开目录”</li><li>单击“创建矩形框”</li><li>单击并释放鼠标左键选择一个区域来注释矩形框</li><li>您可以使用鼠标右键拖动矩形框来复制或移动它</li></ol><p>注释将保存到您指定的文件夹中。</p><p>您可以参考以下热键来加快您的工作流程。</p><h3 id="YOLO"><a href="#YOLO" class="headerlink" title="YOLO"></a>YOLO</h3><ol><li>在<code>data/predefined_classes.txt</code>定义将用于您的培训的课程列表。</li><li>使用上述说明构建和启动。</li><li>在工具栏中“保存”按钮的正下方，单击“PascalVOC”按钮切换到 YOLO 格式。</li><li>您可以使用 Open&#x2F;OpenDIR 处理单个或多个图像。完成单个图像后，单击保存。</li></ol><p>YOLO 格式的 txt 文件将与您的图像同名保存在同一文件夹中。一个名为“classes.txt”的文件也保存到该文件夹中。“classes.txt”定义了你的 YOLO 标签所引用的类名列表。</p><p>笔记：</p><ul><li>您的标签列表在处理图像列表的过程中不应更改。保存图像时，classes.txt 也会更新，而之前的注释不会更新。</li><li>保存为 YOLO 格式时不应该使用“默认类”功能，它不会被引用。</li><li>当保存为 YOLO 格式时，“困难”标志被丢弃。</li></ul><h3 id="热键"><a href="#热键" class="headerlink" title="热键"></a>热键</h3><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl + u</td><td>从目录加载所有图像</td></tr><tr><td>Ctrl + r</td><td>更改默认注释目标目录</td></tr><tr><td>Ctrl + s</td><td>保存</td></tr><tr><td>Ctrl + d</td><td>复制当前标签和矩形框</td></tr><tr><td>Ctrl + Shift + d</td><td>删除当前图像</td></tr><tr><td>space</td><td>将当前图像标记为已验证</td></tr><tr><td>w</td><td>创建一个矩形框</td></tr><tr><td>d</td><td>下一张图片</td></tr><tr><td>a</td><td>上一张图片</td></tr><tr><td>del</td><td>删除选中的矩形框</td></tr><tr><td>Ctrl++</td><td>放大</td></tr><tr><td>Ctrl–</td><td>缩小</td></tr><tr><td>↑→↓←</td><td>键盘箭头移动选定的矩形框</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
      <category>原创</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安装</tag>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写给未来的她</title>
    <link href="/2022/08/06/%E5%86%99%E7%BB%99%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%A5%B9/"/>
    <url>/2022/08/06/%E5%86%99%E7%BB%99%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%A5%B9/</url>
    
    <content type="html"><![CDATA[<p>你好呀，未来的女朋友。虽然我不知道你什么时候会出现，但我每天都在期待和你相遇。我想你应该也在等待和我相遇吧。<br> 你未来的男朋友长的虽然不帅，但性格脾气都挺好的。你和我相遇后，我想你会发现我的脾气有多么多么的好，可以无条件包容你的小脾气。你生气我会一直哄着你。我是个大直男，有时候或许无法明白你的小心思，希望你呢能给我一点小提示，我或许不能给你最好的，但我会在我力所能及的范围内给你最好的。我并不是一个完美的人。我会特别粘你，看见你和异性朋友走的很近我会瞎想也会吃醋。<br> 在你还未到来的这些日子里，我会学习如何做一个好男友。我已经收藏了许许多多好吃好玩的地方，等你来了，每个空闲的周末和假期我们都可以去玩耍，去吃好吃的。<br> 爱自己是终身浪漫的开始，我不在你身边的日子，也希望你是一个会生活爱自己的人，开朗快乐，积极向上，这样就算我不在你身边，也知道你可以过得很好。<br> 我不知道你什么时候会出现或许下一刻，或许一个月、一年…。我会一直等待着你的出现。</p><blockquote><p>You came in to my life just like another season</p><p>你就像一个陌生的季节闯入我的生活</p><p>Not for long just a time just like another season</p><p>一刹那就使我的世界焕然一新</p><p>You came in to my life just like another season</p><p>你就像一缕曙光消融了我的冰雪</p><p>Not for long just a time just like another season</p><p>仅是片刻就把我的世界照亮</p><p>You came in to my life just like another season</p><p>你就像一丝清风吹散了我的阴霾</p><p>Not for long just a time just like another season</p><p>短短一瞬就让我的世界豁然开朗</p><p>You came in to my life just like another season</p><p>你就像几朵野花开在了我贫瘠的土地</p><p>Not for long just a time just like another season</p><p>让我的世界不再枯燥单调</p><p>You came in to my life just like another season</p><p>你就像一个陌生的季节闯入我的生活</p><p>But I’ll cherish everyday till you come my way this season</p><p>但是我会过好当下，直到你来到我身边</p><p>（突然中二）</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2022/08/04/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2022/08/04/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="hexo上传图片"><a href="#hexo上传图片" class="headerlink" title="hexo上传图片"></a>hexo上传图片</h2><p>众所周知，hexo上传图片在Markdown编辑器中是无法预览的</p><p>而且markdown插入图片的方式和hexo插入图片的方式也不尽相同，那么我们来试一下在hexo的markdown中插入图片的效果吧</p><h2 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h2><img src="/2022/08/04/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.jpg" class="" title="图片引用方法一"><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs md">&#123;% asset<span class="hljs-emphasis">_img test.jpg 图片引用方法一 %&#125; </span><br></code></pre></td></tr></table></figure><p>（hexo的推荐用法）</p><h2 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h2><p><img src="/test.jpg" alt="图片引用方法二"></p><p><strong>别看了，这张加载不出来……</strong></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs md">![<span class="hljs-string">图片引用方法二</span>](<span class="hljs-link">test.jpg</span>)<br></code></pre></td></tr></table></figure><p>根本用不了 </p><p>这个总是失效呜呜呜呜</p><h2 id="第三种方法"><a href="#第三种方法" class="headerlink" title="第三种方法"></a>第三种方法</h2><p><img src="/images/test.jpg" alt="图片引用方法三"></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs md">![<span class="hljs-string">图片引用方法三</span>](<span class="hljs-link">/images/test.jpg</span>)<br></code></pre></td></tr></table></figure><p>第三种是使用绝对路径的markdown用法，不过要放在image中或者访问绝对路径是不太方便的</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>第一种图片的注释无法显示*出来</p><p>第二种相对路径的方法不好用是HEXO的版本更新导致其不可用嘛？</p><p>我以后还是老老实实用推荐的<strong>第三种</strong>吧</p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
